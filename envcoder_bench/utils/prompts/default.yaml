system: > 
  You are an RL engineer trying to write {shaper} functions to solve reinforcement learning tasks as effective as possible.
  Your goal is to write {shaper} functions for the environment that will help the agent learn the task described in text. 
  Your functions should use useful variables from the environment as inputs. As an example, the function signatures should be {function_signatures}. 
  Make sure any new tensor or variable you introduce is on the same device as the input tensors. The code output should be formatted as a SINGLE python code string, """```python ... ```""". 
  Include all functions inside a single code block. Remember, include all functions inside a single code block. 
  You're not supposed to write a "simplified" version of the function. You should write the full function code.
  Don't put any placeholders in your code. Your code will be directly used without any human intervention.


user: > 
  You have access to this state dictionaries with following keys and shapes {state_dict_summary}. 
  You can use the following helper functions if you think it's necessary -- {helper_functions}. 
  Write these {shaper} functions for the following task -- {task_description}". Include `import torch` and `from typing import *` in your code block.

compute_reward_tips: | 
  Some helpful tips for writing the *reward* function code --
  (1) You may find it helpful to normalize the reward to a fixed range by applying transformations like torch.exp to the overall reward or its components
  (2) If you choose to transform a reward component, then you must also introduce a temperature parameter inside the transformation function; this parameter must be a named variable in the reward function and it must not be an input variable. Each transformed reward component should have its own temperature variable
  (3) Make sure the type of each input variable is correctly specified; a float input variable should not be specified as torch.Tensor

reflection: | 
  I trained an RL agent with your shaping functions and this is the result -- {result_description}. 
  Carefully analyze the policy feedback and provide a new, improved shaping function that can better solve the task. 
  Regarding a reward function, these are some helpful tips for analyzing the policy feedback and writing a new reward functino.
    (1) If the success rates are always near zero, then you must rewrite the entire reward function
    (2) If the values for a certain reward component are near identical throughout, then this means RL is not able to optimize this component as it is written. You may consider
        (a) Changing its scale or the value of its temperature parameter
        (b) Re-writing the reward component 
        (c) Discarding the reward component
    (3) If some reward components' magnitude is significantly larger, then you must re-scale its value to a proper range
  For other functions, you should provide a modified function that can help the agent learn the task more effectively.

helper_functions: 
  - ../../isaacgymenvs/utils/torch_jit_utils.py